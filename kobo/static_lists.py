from django.utils.translation import ugettext_lazy as _

# This file is a place to store static, translatable strings

SECTORS = (
    # (value, human-readable label)
    ("Cultural", _("Cultural")),
    ("Natural", _("Natural")),
    ("Paleo", _("Paleo")),
    ("GIS", _("GIS")),
    ("Other", _("Other")),
)

# You might generate such a list of countries with code like this:
#
#     from __future__ import print_function
#     import requests
#     import sys
#
#     url = 'https://www.humanitarianresponse.info/api/v1.0/locations?filter[admin_level]=0'
#     while url:
#         print('Fetching', url, file=sys.stderr)
#         response = requests.get(url)
#         j = response.json()
#         if 'next' in j:
#             url = j['next']['href']
#         else:
#             url = None
#         for d in j['data']:
#             print("({}, _({}))".format(repr(d['iso3']), repr(d['label'])))
COUNTRIES = (
    # (value, human-readable label)
    (u'AL', _(u'Alabama')),
    (u'AK', _(u'Alaska')),
    (u'AZ', _(u'Arizona')),
    (u'AR', _(u'Arkansas')),
    (u'CA', _(u'California')),
    (u'CO', _(u'Colorado')),
    (u'CT', _(u'Connecticut')),
    (u'DE', _(u'Delaware')),
    (u'DC', _(u'District of Columbia')),
    (u'FL', _(u'Florida')),
    (u'GA', _(u'Georgia')),
    (u'HI', _(u'Hawaii')),
    (u'ID', _(u'Idaho')),
    (u'IL', _(u'Illinois')),
    (u'IN', _(u'Indiana')),
    (u'IA', _(u'Iowa')),
    (u'KS', _(u'Kansas')),
    (u'KY', _(u'Kentucky')),
    (u'LA', _(u'Louisiana')),
    (u'ME', _(u'Maine')),
    (u'MT', _(u'Montana')),
    (u'NE', _(u'Nebraska')),
    (u'NV', _(u'Nevada')),
    (u'NH', _(u'New Hampshire')),
    (u'NJ', _(u'New Jersey')),
    (u'NM', _(u'New Mexico')),
    (u'NY', _(u'New York')),
    (u'NC', _(u'North Carolina')),
    (u'ND', _(u'North Dakota')),
    (u'OH', _(u'Ohio')),
    (u'OK', _(u'Oklahoma')),
    (u'OR', _(u'Oregon')),
    (u'MD', _(u'Maryland')),
    (u'MA', _(u'Massachusetts')),
    (u'MI', _(u'Michigan')),
    (u'MN', _(u'Minnesota')),
    (u'MS', _(u'Mississippi')),
    (u'MO', _(u'Missouri')),
    (u'PA', _(u'Pennsylvania')),
    (u'RI', _(u'Rhode Island')),
    (u'SC', _(u'South Carolina')),
    (u'SD', _(u'South Dakota')),
    (u'TN', _(u'Tennessee')),
    (u'TX', _(u'Texas')),
    (u'UT', _(u'Utah')),
    (u'VT', _(u'Vermont')),
    (u'VA', _(u'Virginia')),
    (u'WA', _(u'Washington')),
    (u'WV', _(u'West Virginia')),
    (u'WI', _(u'Wisconsin')),
    (u'WY', _(u'Wyoming')),
)

# You might generate such a list of languages with code like this:
#
#     import requests
#     url = 'http://loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt'
#     response = requests.get(url)
#     for line in response.iter_lines():
#         # Wow, the LOC does not specify an encoding in the response!
#         line = line.decode(response.apparent_encoding)
#         fields = line.strip().split('|')
#         if fields[2]:
#             print '({}, _({})),'.format(repr(fields[2]), repr(fields[3]))
LANGUAGES = (
    # (value, human-readable label)
    (u'aa', _(u'Afar')),
    (u'ab', _(u'Abkhazian')),
    (u'af', _(u'Afrikaans')),
    (u'ak', _(u'Akan')),
    (u'sq', _(u'Albanian')),
    (u'am', _(u'Amharic')),
    (u'ar', _(u'Arabic')),
    (u'an', _(u'Aragonese')),
    (u'hy', _(u'Armenian')),
    (u'as', _(u'Assamese')),
    (u'av', _(u'Avaric')),
    (u'ae', _(u'Avestan')),
    (u'ay', _(u'Aymara')),
    (u'az', _(u'Azerbaijani')),
    (u'ba', _(u'Bashkir')),
    (u'bm', _(u'Bambara')),
    (u'eu', _(u'Basque')),
    (u'be', _(u'Belarusian')),
    (u'bn', _(u'Bengali')),
    (u'bh', _(u'Bihari languages')),
    (u'bi', _(u'Bislama')),
    (u'bs', _(u'Bosnian')),
    (u'br', _(u'Breton')),
    (u'bg', _(u'Bulgarian')),
    (u'my', _(u'Burmese')),
    (u'ca', _(u'Catalan; Valencian')),
    (u'ch', _(u'Chamorro')),
    (u'ce', _(u'Chechen')),
    (u'zh', _(u'Chinese')),
    (u'cu', _(u'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic')),
    (u'cv', _(u'Chuvash')),
    (u'kw', _(u'Cornish')),
    (u'co', _(u'Corsican')),
    (u'cr', _(u'Cree')),
    (u'cs', _(u'Czech')),
    (u'da', _(u'Danish')),
    (u'dv', _(u'Divehi; Dhivehi; Maldivian')),
    (u'nl', _(u'Dutch; Flemish')),
    (u'dz', _(u'Dzongkha')),
    (u'en', _(u'English')),
    (u'eo', _(u'Esperanto')),
    (u'et', _(u'Estonian')),
    (u'ee', _(u'Ewe')),
    (u'fo', _(u'Faroese')),
    (u'fj', _(u'Fijian')),
    (u'fi', _(u'Finnish')),
    (u'fr', _(u'French')),
    (u'fy', _(u'Western Frisian')),
    (u'ff', _(u'Fulah')),
    (u'ka', _(u'Georgian')),
    (u'de', _(u'German')),
    (u'gd', _(u'Gaelic; Scottish Gaelic')),
    (u'ga', _(u'Irish')),
    (u'gl', _(u'Galician')),
    (u'gv', _(u'Manx')),
    (u'el', _(u'Greek, Modern (1453-)')),
    (u'gn', _(u'Guarani')),
    (u'gu', _(u'Gujarati')),
    (u'ht', _(u'Haitian; Haitian Creole')),
    (u'ha', _(u'Hausa')),
    (u'he', _(u'Hebrew')),
    (u'hz', _(u'Herero')),
    (u'hi', _(u'Hindi')),
    (u'ho', _(u'Hiri Motu')),
    (u'hr', _(u'Croatian')),
    (u'hu', _(u'Hungarian')),
    (u'ig', _(u'Igbo')),
    (u'is', _(u'Icelandic')),
    (u'io', _(u'Ido')),
    (u'ii', _(u'Sichuan Yi; Nuosu')),
    (u'iu', _(u'Inuktitut')),
    (u'ie', _(u'Interlingue; Occidental')),
    (u'ia', _(u'Interlingua (International Auxiliary Language Association)')),
    (u'id', _(u'Indonesian')),
    (u'ik', _(u'Inupiaq')),
    (u'it', _(u'Italian')),
    (u'jv', _(u'Javanese')),
    (u'ja', _(u'Japanese')),
    (u'kl', _(u'Kalaallisut; Greenlandic')),
    (u'kn', _(u'Kannada')),
    (u'ks', _(u'Kashmiri')),
    (u'kr', _(u'Kanuri')),
    (u'kk', _(u'Kazakh')),
    (u'km', _(u'Central Khmer')),
    (u'ki', _(u'Kikuyu; Gikuyu')),
    (u'rw', _(u'Kinyarwanda')),
    (u'ky', _(u'Kirghiz; Kyrgyz')),
    (u'kv', _(u'Komi')),
    (u'kg', _(u'Kongo')),
    (u'ko', _(u'Korean')),
    (u'kj', _(u'Kuanyama; Kwanyama')),
    (u'ku', _(u'Kurdish')),
    (u'lo', _(u'Lao')),
    (u'la', _(u'Latin')),
    (u'lv', _(u'Latvian')),
    (u'li', _(u'Limburgan; Limburger; Limburgish')),
    (u'ln', _(u'Lingala')),
    (u'lt', _(u'Lithuanian')),
    (u'lb', _(u'Luxembourgish; Letzeburgesch')),
    (u'lu', _(u'Luba-Katanga')),
    (u'lg', _(u'Ganda')),
    (u'mk', _(u'Macedonian')),
    (u'mh', _(u'Marshallese')),
    (u'ml', _(u'Malayalam')),
    (u'mi', _(u'Maori')),
    (u'mr', _(u'Marathi')),
    (u'ms', _(u'Malay')),
    (u'mg', _(u'Malagasy')),
    (u'mt', _(u'Maltese')),
    (u'mn', _(u'Mongolian')),
    (u'na', _(u'Nauru')),
    (u'nv', _(u'Navajo; Navaho')),
    (u'nr', _(u'Ndebele, South; South Ndebele')),
    (u'nd', _(u'Ndebele, North; North Ndebele')),
    (u'ng', _(u'Ndonga')),
    (u'ne', _(u'Nepali')),
    (u'nn', _(u'Norwegian Nynorsk; Nynorsk, Norwegian')),
    (u'nb', _(u'Bokm\xe5l, Norwegian; Norwegian Bokm\xe5l')),
    (u'no', _(u'Norwegian')),
    (u'ny', _(u'Chichewa; Chewa; Nyanja')),
    (u'oc', _(u'Occitan (post 1500); Proven\xe7al')),
    (u'oj', _(u'Ojibwa')),
    (u'or', _(u'Oriya')),
    (u'om', _(u'Oromo')),
    (u'os', _(u'Ossetian; Ossetic')),
    (u'pa', _(u'Panjabi; Punjabi')),
    (u'fa', _(u'Persian')),
    (u'pi', _(u'Pali')),
    (u'pl', _(u'Polish')),
    (u'pt', _(u'Portuguese')),
    (u'ps', _(u'Pushto; Pashto')),
    (u'qu', _(u'Quechua')),
    (u'rm', _(u'Romansh')),
    (u'ro', _(u'Romanian; Moldavian; Moldovan')),
    (u'rn', _(u'Rundi')),
    (u'ru', _(u'Russian')),
    (u'sg', _(u'Sango')),
    (u'sa', _(u'Sanskrit')),
    (u'si', _(u'Sinhala; Sinhalese')),
    (u'sk', _(u'Slovak')),
    (u'sl', _(u'Slovenian')),
    (u'se', _(u'Northern Sami')),
    (u'sm', _(u'Samoan')),
    (u'sn', _(u'Shona')),
    (u'sd', _(u'Sindhi')),
    (u'so', _(u'Somali')),
    (u'st', _(u'Sotho, Southern')),
    (u'es', _(u'Spanish; Castilian')),
    (u'sc', _(u'Sardinian')),
    (u'sr', _(u'Serbian')),
    (u'ss', _(u'Swati')),
    (u'su', _(u'Sundanese')),
    (u'sw', _(u'Swahili')),
    (u'sv', _(u'Swedish')),
    (u'ty', _(u'Tahitian')),
    (u'ta', _(u'Tamil')),
    (u'tt', _(u'Tatar')),
    (u'te', _(u'Telugu')),
    (u'tg', _(u'Tajik')),
    (u'tl', _(u'Tagalog')),
    (u'th', _(u'Thai')),
    (u'bo', _(u'Tibetan')),
    (u'ti', _(u'Tigrinya')),
    (u'to', _(u'Tonga (Tonga Islands)')),
    (u'tn', _(u'Tswana')),
    (u'ts', _(u'Tsonga')),
    (u'tk', _(u'Turkmen')),
    (u'tr', _(u'Turkish')),
    (u'tw', _(u'Twi')),
    (u'ug', _(u'Uighur; Uyghur')),
    (u'uk', _(u'Ukrainian')),
    (u'ur', _(u'Urdu')),
    (u'uz', _(u'Uzbek')),
    (u've', _(u'Venda')),
    (u'vi', _(u'Vietnamese')),
    (u'vo', _(u'Volap\xfck')),
    (u'cy', _(u'Welsh')),
    (u'wa', _(u'Walloon')),
    (u'wo', _(u'Wolof')),
    (u'xh', _(u'Xhosa')),
    (u'yi', _(u'Yiddish')),
    (u'yo', _(u'Yoruba')),
    (u'za', _(u'Zhuang; Chuang')),
    (u'zu', _(u'Zulu')),
)

# Django itself does not support all languages, so we cannot always rely upon
# `django.utils.translation.get_language_info()` to provide native language
# names for our translations
NATIVE_LANGUAGE_NAMES = {
    u'ku': u'\u0643\u0648\u0631\u062f\u06cc',
}
